// require('dotenv').config();
// const { Client, GatewayIntentBits } = require('discord.js');
// const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus, demuxProbe } = require('@discordjs/voice');
// const ytdl = require('youtube-dl-exec');
// const playdl = require('play-dl');

// const client = new Client({
//     intents: [
//         GatewayIntentBits.Guilds,
//         GatewayIntentBits.GuildMessages,
//         GatewayIntentBits.MessageContent,
//         GatewayIntentBits.GuildVoiceStates
//     ]
// });

// // Bot prefix
// const PREFIX = '-';

// // Store music queues for each guild
// const musicQueues = new Map();

// class MusicQueue {
//     constructor() {
//         this.songs = [];
//         this.connection = null;
//         this.player = null;
//         this.isPlaying = false;
//         this.currentChannel = null;
//     }
// }

// client.once('ready', () => {
//     console.log(`Logged in as ${client.user.tag}!`);
//     console.log(`Use ${PREFIX}play <song> to play music!`);
// });

// // Handle message commands
// client.on('messageCreate', async message => {
//     if (message.author.bot || !message.content.startsWith(PREFIX)) return;

//     const args = message.content.slice(PREFIX.length).trim().split(/ +/);
//     const command = args.shift().toLowerCase();
//     const guildId = message.guild.id;

//     if (!musicQueues.has(guildId)) {
//         musicQueues.set(guildId, new MusicQueue());
//     }

//     const queue = musicQueues.get(guildId);
//     queue.currentChannel = message.channel;

//     switch (command) {
//         case 'play':
//             await handlePlay(message, queue, args.join(' '));
//             break;
//         case 'p':
//             await handlePlay(message, queue, args.join(' '));
//             break;
//         case 'stop':
//             await handleStop(message, queue);
//             break;
//         case 'skip':
//             await handleSkip(message, queue);
//             break;
//         case 'queue':
//             await handleQueue(message, queue);
//             break;
//         case 'help':
//             await handleHelp(message);
//             break;
//     }
// });

// async function handlePlay(message, queue, query) {
//     if (!query) {
//         return message.reply('Please provide a song name or YouTube URL! Example: `!play never gonna give you up`');
//     }

//     const voiceChannel = message.member.voice.channel;
//     if (!voiceChannel) {
//         return message.reply('You need to be in a voice channel to play music!');
//     }

//     const loadingMessage = await message.reply('🔍 Searching for song...');

//     try {
//         let songInfo;
//         const isURL = playdl.yt_validate(query) === 'video';

//         if (isURL) {
//             // Get info using youtube-dl-exec
//             const info = await ytdl(query, {
//                 dumpSingleJson: true,
//                 noWarnings: true,
//                 preferFreeFormats: true,
//                 addHeader: ['referer:youtube.com', 'user-agent:googlebot']
//             });

//             songInfo = {
//                 title: info.title,
//                 url: query,
//                 duration: info.duration,
//                 thumbnail: info.thumbnail
//             };
//         } else {
//             // Search using play-dl
//             const searchResults = await playdl.search(query, { limit: 1 });
//             if (searchResults.length === 0) {
//                 return loadingMessage.edit('❌ No songs found!');
//             }
//             songInfo = {
//                 title: searchResults[0].title,
//                 url: searchResults[0].url,
//                 duration: searchResults[0].durationInSec,
//                 thumbnail: searchResults[0].thumbnails[0]?.url
//             };
//         }

//         const song = {
//             title: songInfo.title,
//             url: songInfo.url,
//             duration: songInfo.duration,
//             requestedBy: message.author.tag,
//             thumbnail: songInfo.thumbnail
//         };

//         queue.songs.push(song);

//         if (!queue.connection) {
//             queue.connection = joinVoiceChannel({
//                 channelId: voiceChannel.id,
//                 guildId: message.guild.id,
//                 adapterCreator: message.guild.voiceAdapterCreator,
//             });

//             queue.player = createAudioPlayer();
//             queue.connection.subscribe(queue.player);

//             // Error handling
//             queue.player.on('error', error => {
//                 console.error('Audio Player Error:', error);
//                 if (queue.currentChannel) {
//                     queue.currentChannel.send('❌ Player error. Skipping song...');
//                 }
//                 skipSong(queue);
//             });

//             queue.player.on(AudioPlayerStatus.Idle, () => {
//                 skipSong(queue);
//             });
//         }

//         if (!queue.isPlaying) {
//             playNextSong(queue);
//         }

//         loadingMessage.edit(`✅ Added to queue: [${song.title}](${song.url})`);
//     } catch (error) {
//         console.error('Play Command Error:', error);
//         loadingMessage.edit(`❌ Error: ${error.message}`);
//     }
// }

// function skipSong(queue) {
//     if (!queue.currentChannel) return;

//     queue.songs.shift();
//     if (queue.songs.length > 0) {
//         playNextSong(queue);
//     } else {
//         queue.isPlaying = false;
//         // Auto disconnect after 1 minute
//         setTimeout(() => {
//             if (!queue.isPlaying && queue.connection) {
//                 queue.connection.destroy();
//                 queue.connection = null;
//                 queue.player = null;
//                 queue.currentChannel.send('🛑 Disconnected due to inactivity');
//             }
//         }, 60_000);
//     }
// }

// async function playNextSong(queue) {
//     if (queue.songs.length === 0) {
//         queue.isPlaying = false;
//         return;
//     }

//     const song = queue.songs[0];
//     const maxRetries = 2;
//     let retryCount = 0;
//     let success = false;

//     if (!queue.currentChannel) return;

//     while (retryCount < maxRetries && !success) {
//         try {
//             console.log(`Playing: ${song.title} (${song.url}) [Attempt ${retryCount + 1}]`);

//             // Use youtube-dl-exec to stream audio directly
//             const ytdlProcess = ytdl.exec(
//                 song.url,
//                 {
//                     output: '-',
//                     quiet: true,
//                     format: 'bestaudio',
//                     limitRate: '1M',
//                     addHeader: ['referer:youtube.com', 'user-agent:googlebot']
//                 },
//                 { stdio: ['ignore', 'pipe', 'ignore'] }
//             );

//             if (!ytdlProcess.stdout) {
//                 throw new Error('Failed to create audio stream');
//             }

//             // Use demuxProbe to detect audio format
//             const { stream, type } = await demuxProbe(ytdlProcess.stdout);

//             // Create audio resource with detected type
//             const resource = createAudioResource(stream, {
//                 inputType: type,
//                 inlineVolume: true
//             });

//             queue.player.play(resource);
//             queue.isPlaying = true;

//             queue.currentChannel.send(`🎵 Now playing: [${song.title}](${song.url})`);
//             success = true;
//         } catch (error) {
//             console.error(`Play Error [Attempt ${retryCount + 1}]:`, error);
//             retryCount++;

//             if (retryCount >= maxRetries) {
//                 let errorMsg = `❌ Failed to play: [${song.title}](${song.url})`;

//                 if (error.message.includes('age restricted')) {
//                     errorMsg += '\n🔞 Age-restricted content cannot be played.';
//                 } else if (error.message.includes('unavailable')) {
//                     errorMsg += '\n🌍 Region blocked - Try using VPN.';
//                 } else if (error.message.includes('private') || error.message.includes('embedding disabled')) {
//                     errorMsg += '\n🔒 Private video or embedding disabled.';
//                 } else {
//                     errorMsg += `\n💻 Error: ${error.message}`;
//                 }

//                 queue.currentChannel.send(errorMsg);
//                 skipSong(queue);
//             }
//         }
//     }
// }

// async function handleStop(message, queue) {
//     if (!queue.connection) {
//         return message.reply('❌ No music is currently playing!');
//     }

//     queue.songs = [];
//     queue.player.stop();
//     queue.connection.destroy();
//     queue.connection = null;
//     queue.player = null;
//     queue.isPlaying = false;

//     message.reply('⏹️ Music stopped and bot disconnected!');
// }

// async function handleSkip(message, queue) {
//     if (!queue.isPlaying) {
//         return message.reply('❌ No music is currently playing!');
//     }

//     queue.player.stop();
//     message.reply('⏭️ Song skipped!');
// }

// async function handleQueue(message, queue) {
//     if (queue.songs.length === 0) {
//         return message.reply('📭 The queue is empty!');
//     }

//     const queueList = queue.songs.slice(0, 10).map((song, index) => {
//         return `${index + 1}. [${song.title}](${song.url}) - Requested by ${song.requestedBy}`;
//     }).join('\n');

//     message.reply({
//         embeds: [{
//             color: 0x3498db,
//             title: '🎵 Current Queue',
//             description: queueList,
//             footer: { text: `Total songs: ${queue.songs.length}` }
//         }]
//     });
// }

// async function handleHelp(message) {
//     const helpEmbed = {
//         color: 0x0099ff,
//         title: '🎵 Music Bot Commands',
//         description: 'Here are all the available commands:',
//         fields: [
//             {
//                 name: `${PREFIX}play <song>`,
//                 value: 'Play a song by name or YouTube URL',
//                 inline: false,
//             },
//             {
//                 name: `${PREFIX}stop`,
//                 value: 'Stop music and disconnect bot',
//                 inline: true,
//             },
//             {
//                 name: `${PREFIX}skip`,
//                 value: 'Skip current song',
//                 inline: true,
//             },
//             {
//                 name: `${PREFIX}queue`,
//                 value: 'Show current queue',
//                 inline: true,
//             },
//             {
//                 name: `${PREFIX}help`,
//                 value: 'Show this help message',
//                 inline: true,
//             }
//         ],
//         footer: {
//             text: 'Example: !play never gonna give you up',
//         },
//     };

//     message.reply({ embeds: [helpEmbed] });
// }

// client.login(process.env.BOT_TOKEN);



















{
  "name": "buzz_discord_bot",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "node --watch index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@discordjs/opus": "^0.10.0",
    "@discordjs/voice": "^0.18.0",
    "discord.js": "^14.20.0",
    "dotenv": "^16.5.0",
    "ffmpeg-static": "^5.2.0",
    "play-dl": "^1.9.7",
    "youtube-dl-exec": "^3.0.22",
    "ytdl-core": "^4.11.5"
  }
}
